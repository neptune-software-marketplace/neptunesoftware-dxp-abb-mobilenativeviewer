{
	"id": "2c07d6a9-96b6-437b-b3e9-67dc29ed25b9",
	"createdAt": "2022-02-04T15:52:00.246Z",
	"updatedAt": "2022-08-02T12:11:26.430Z",
	"createdBy": "luuk.wosten@neptune-software.com",
	"changedBy": "kristin.eliassen@neptune-software.com",
	"objects": [
		{
			"fieldNo": "2790a811-e522-4c36-d3de-33da890997e5",
			"fieldName": "oShell",
			"fieldParent": 0,
			"fieldType": "sap.m.Shell",
			"script": "",
			"request": [],
			"response": [],
			"attributes": [],
			"data": []
		},
		{
			"fieldNo": 99999,
			"data": [
				{
					"fieldNo": "a1e9b1bc-6fc8-4672-ad95-96608eab4f32",
					"fieldName": "HOW_TO_USE",
					"fieldParent": 99999,
					"fieldType": "neptune.Script",
					"script": [
						"==OBJECT STRING==",
						"// call this app using AppCache.Load() function on Neptune Launchpad\r",
						"// code snippet:\r",
						"// if (sap.n) {\r",
						"//     AppCache.Load(\"P9_CORE_NATIVE_VIEWER\", {\r",
						"//         startParams: {\r",
						"//             fileData: base64_String,        // optional - either fileData or fileUrl or pdfTemplate\r",
						"//             mimeType : \"application/pdf\"    // optional - mandatory if fileData is sent\r",
						"//             fileUrl: pdfLink,                  // optional - either fileData or fileUrl or pdfTemplate\r",
						"//             pdfTemplate : \"template_name_from_PDF_Designer\", // optional - either fileData or fileUrl or pdfTemplate\r",
						"//             pdfTemplateData: \"data_in_JSON_for_PDF_Template\",\r",
						"//             fileUrl: pdfLink,                               // optional - either fileData or fileUrl\r",
						"//             fileName: \"Quiz.docx\",\r",
						"//         }\r",
						"//     });\r",
						"// }\r",
						"\r",
						"// you can pass either content (base64 string of file) or url of the file or PDF Template\r",
						"// - atleast one of these (content or url) is mandatory"
					],
					"request": [],
					"response": [],
					"attributes": [],
					"data": []
				},
				{
					"fieldNo": "fa6a704c-e861-47c4-abd9-beaafd065abf",
					"fieldName": "Functions",
					"fieldParent": 99999,
					"fieldType": "neptune.Script",
					"script": [
						"==OBJECT STRING==",
						"var gFile;\r",
						"var source = \"content\";\r",
						"\r",
						"// Init\r",
						"sap.ui.getCore().attachInit(function (data) {\r",
						"    gFile = data;\r",
						"    if (!gFile.fileData && !gFile.fileUrl && !gFile.pdfTemplate) {\r",
						"        alert(\"No content given in startParams\");\r",
						"        closeApp();\r",
						"        return;\r",
						"    }\r",
						"\r",
						"    if (gFile.fileData) {\r",
						"        source = \"content\";\r",
						"        if (!gFile.mimeType) {\r",
						"            alert(\"No mimeType given in startParams\");\r",
						"            closeApp();\r",
						"            return;\r",
						"        }\r",
						"    }\r",
						"\r",
						"    if (!gFile.fileName) {\r",
						"        alert(\"No fileName given in startParams\");\r",
						"        closeApp();\r",
						"        return;\r",
						"    }\r",
						"\r",
						"    // Desktop\r",
						"    if (sap.ui.Device.system.desktop) {\r",
						"        alert(\"This app must exclusively used in a mobile device\");\r",
						"        closeApp();\r",
						"        return;\r",
						"    }\r",
						"\r",
						"    if (!gFile.fileData && gFile.fileUrl) {\r",
						"        source = \"url\";\r",
						"    }\r",
						"\r",
						"    if (gFile.pdfTemplate) {\r",
						"        source = \"pdfTemplate\";\r",
						"    }\r",
						"\r",
						"    // Phone / Tablet\r",
						"    if (sap.ui.Device.system.phone || sap.ui.Device.system.tablet) {\r",
						"\r",
						"        if (typeof cordova === \"undefined\") {\r",
						"            alert(\"You need to test in a Mobile App\");\r",
						"            closeApp();\r",
						"        } else {\r",
						"            if (source === \"content\") {\r",
						"                nativeOpenContent(gFile.fileData, gFile.mimeType, gFile.fileName);\r",
						"            } else if (source === \"pdfTemplate\") {\r",
						"                $.ajax({\r",
						"                    type: \"POST\",\r",
						"                    url: AppCache.Url + \"/pdf/\" + gFile.pdfTemplate,\r",
						"                    data: gFile.pdfTemplateData,\r",
						"                    success: function (data) {\r",
						"                        // elem.src = \"data:application/pdf;base64,\" + data;\r",
						"                        source = \"content\";\r",
						"                        gFile.fileData = data;\r",
						"                        gFile.mimeType = \"application/pdf\";\r",
						"                        nativeOpenContent(gFile.fileData, gFile.mimeType, gFile.fileName);\r",
						"                    },\r",
						"                    error: function (result, status) {\r",
						"                        if (result.responseJSON && result.responseJSON.status) {\r",
						"                            console.error(result.responseJSON.status);\r",
						"                        }\r",
						"                    }\r",
						"                });\r",
						"            } else {\r",
						"                nativeOpenURL();\r",
						"            }\r",
						"        }\r",
						"        return;\r",
						"    }\r",
						"});\r",
						"\r",
						"\r",
						"// ---------------------------------------------------\r",
						"// Common functions\r",
						"// ---------------------------------------------------\r",
						"makeBinary = function (pdfBase64) {\r",
						"\r",
						"    var raw = window.atob(pdfBase64);\r",
						"    var rawLength = raw.length;\r",
						"\r",
						"    var array = new Uint8Array(rawLength);\r",
						"    for (i = 0; i < rawLength; i++) {\r",
						"        array[i] = raw.charCodeAt(i);\r",
						"    }\r",
						"    return array;\r",
						"}\r",
						"\r",
						"// ---------------------------------------------------\r",
						"// Open mobile native Reader - with URL of file\r",
						"// ---------------------------------------------------\r",
						"nativeOpenURL = function () {\r",
						"\r",
						"    // get Base64 from URL\r",
						"    var xhr = new XMLHttpRequest();\r",
						"\r",
						"    xhr.open(\"GET\", gFile.fileUrl, true);\r",
						"    xhr.responseType = \"blob\";\r",
						"\r",
						"    xhr.onload = function (e) {\r",
						"\r",
						"        var reader = new FileReader();\r",
						"        reader.onload = function (event) {\r",
						"            var fileData = event.target.result;  // fileData has base64 string\r",
						"            var mimeType = fileData.substring(fileData.lastIndexOf(\":\") + 1, fileData.indexOf(\";\"));\r",
						"            fileData = fileData.slice(fileData.indexOf(\",\") + 1);\r",
						"\r",
						"            gFile.fileData = fileData;\r",
						"            gFile.mimeType = mimeType;\r",
						"\r",
						"            nativeOpenContent(gFile.fileData, gFile.mimeType, gFile.fileName);\r",
						"\r",
						"        }\r",
						"        var file = this.response;\r",
						"        reader.readAsDataURL(file)\r",
						"    };\r",
						"\r",
						"    xhr.send();\r",
						"\r",
						"}\r",
						"\r",
						"// ---------------------------------------------------\r",
						"// Open mobile native Reader\r",
						"// ---------------------------------------------------\r",
						"nativeOpenContent = function (content, mimeType, fileName) {\r",
						"\r",
						"    // Set Directory\r",
						"    switch (sap.ui.Device.os.name) {\r",
						"\r",
						"        case 'Android':\r",
						"            nativeDir = cordova.file.externalCacheDirectory;\r",
						"            break;\r",
						"\r",
						"        case 'iOS':\r",
						"            nativeDir = cordova.file.tempDirectory;\r",
						"            break;\r",
						"\r",
						"        case 'winphone':\r",
						"            nativeDir = cordova.file.externalCacheDirectory;\r",
						"            break;\r",
						"\r",
						"        // Windows 10 Client\r",
						"        case 'win':\r",
						"            nativeDir = cordova.file.cacheDirectory;\r",
						"            break;\r",
						"\r",
						"        default:\r",
						"            break;\r",
						"    }\r",
						"\r",
						"    // Create Array\r",
						"    dataArray = makeBinary(content);\r",
						"\r",
						"    // Create and Display File\r",
						"    window.resolveLocalFileSystemURL(nativeDir, function (dir) {\r",
						"        dir.getFile(fileName, {\r",
						"            create: true\r",
						"        }, function (file) {\r",
						"            nativeWriteLog(file, mimeType, nativeDir, fileName, dataArray);\r",
						"        });\r",
						"    });\r",
						"\r",
						"}\r",
						"\r",
						"nativeWriteLog = function (file, mimeType, nativeDir, fileName, dataArray) {\r",
						"\r",
						"    file.createWriter(function (fileWriter) {\r",
						"        fileWriter.onwriteend = function (e) {\r",
						"            cordova.plugins.fileOpener2.open(\r",
						"                nativeDir + fileName,\r",
						"                mimeType, {\r",
						"                error: function (e) {\r",
						"                    console.log('Error open: ' + e.status + ' - Error message: ' + e.message);\r",
						"                    closeApp();\r",
						"                },\r",
						"                success: function () {\r",
						"                    closeApp();\r",
						"                }\r",
						"            }\r",
						"            );\r",
						"        };\r",
						"\r",
						"        fileWriter.onerror = function (e) {\r",
						"            console.log('WRITE ERROR is');\r",
						"            console.log(e);\r",
						"        };\r",
						"\r",
						"        var blob = new Blob([dataArray], {\r",
						"            type: mimeType\r",
						"        });\r",
						"        fileWriter.write(blob);\r",
						"\r",
						"    }, nativeWriteFail);\r",
						"}\r",
						"\r",
						"nativeWriteFail = function (e) {\r",
						"    console.log('Error write: ' + e.status + ' - Error message: ' + e.message);\r",
						"}\r",
						"\r",
						"// App commits suicide\r",
						"closeApp = function () {\r",
						"\r",
						"    setTimeout(function () {\r",
						"\r",
						"        // Clear View\r",
						"        if (AppCache.View[localAppID]) {\r",
						"            AppCache.View[localAppID].removeAllContent();\r",
						"            AppCache.View[localAppID].destroy();\r",
						"            AppCache.View[localAppID] = null;\r",
						"            delete AppCache.View[localAppID];\r",
						"        }\r",
						"\r",
						"        // Clear All Events\r",
						"        delete sap.n.Apps[localAppID];\r",
						"    }, 300);\r",
						"}\r",
						""
					],
					"request": [],
					"response": [],
					"attributes": [],
					"data": []
				}
			]
		},
		{
			"fieldNo": 99998,
			"data": []
		}
	],
	"ver": "22.8.2.1411",
	"application": "p9_core_native_viewer",
	"title": "",
	"description": "",
	"enableFileStorage": false,
	"enableManifest": false,
	"enableStylesheet": false,
	"enableObfuscate": false,
	"onlyRunLaunchpad": false,
	"disabled": false,
	"loadLaunchpadCode": null,
	"loadApplicationCode": null,
	"appType": "",
	"ui5_m": true,
	"ui5_f": false,
	"ui5_table": false,
	"ui5_tnt": false,
	"ui5_uxap": false,
	"ui5_chart": false,
	"ui5_theme": "sap_belize",
	"ui5_version": "",
	"ui5_language": null,
	"cus_theme": "",
	"css": "",
	"header": "",
	"manifest": "",
	"globalScript": "",
	"deleted": false,
	"libHighchart": false,
	"libHighmap": false,
	"publicAccess": false,
	"ui5_bootstrap": false,
	"apis": []
}